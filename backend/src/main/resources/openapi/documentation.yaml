openapi: "3.0.3"
info:
  title: "backend API"
  description: "backend API"
  version: "0.1.0"
servers:
  - url: "https://backend/api"
paths:
  /auth:
    summary: "Manages user authentication and passwords"
    get:
      operationId: getAuth
      summary: "Get auth status"
      responses:
        "200":
          description: "An AuthStatus with a user attribute set to the currently logged in user, or null if there is none"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/AuthStatus"
    post:
      operationId: login
      summary: "Login"
      description: "Status code indicates the result of the operation while the subsequent auth status is returned in all cases"
      requestBody:
        content:
          'application/json':
            schema:
              type: "object"
              properties:
                username:
                  type: "string"
                  required: true
                password:
                  type: "string"
                  format: "password"
                  required: true
      responses:
        "200":
          description: "Successfully logged in"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/AuthStatus"
        "401":
          description: "Successfully logged in"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/AuthStatus"
        "304":
          description: "User was already logged in"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/AuthStatus"
        "400":
          description: "Already logged in as a different user"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/AuthStatus"
    delete:
      operationId: logout
      summary: "Logout"
      responses:
        "200":
          description: "OK"
  /auth/password:
    post:
      operationId: setPassword
      summary: "Set password"
      description: "Change own password"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/PasswordFormData"
      responses:
        "400":
          description: "Bad Request"
        "200":
          description: "OK"
  /auth/password/{id}:
    post:
      operationId: setUserPassword
      summary: "Change given user's password"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/PasswordFormData"
        required: true
      responses:
        "400":
          description: "Invalid password or user not found"
        "200":
          description: "Password changed succesfully"
    delete:
      operationId: unsetUserPassword
      summary: "Delete a user's password"
      description: "Disable login for this user"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "Password changed succesfully"
        "400":
          description: "User not Found"
  /users:
    get:
      operationId: getUserList
      summary: "Get all users"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
    post:
      operationId: createUser
      summary: "Create user"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/UserData"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            'application/json':
              schema:
                type: "integer"
                format: "int32"
        "409":
          description: "User already exists with this name"
  /users/{id}:
    get:
      operationId: getUser
      summary: "Get user"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Not Found"
    patch:
      operationId: updateUser
      summary: "Update user data"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/UserData"
        required: true
      responses:
        "200":
          description: "OK"
        "400":
          description: "No user found with this ID"
        "409":
          description: "Different user exists with this name"
    delete:
      operationId: deleteUser
      summary: "Delete user"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "OK"
  /games:
    get:
      operationId: getGameList
      summary: "Get all games"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Game"
    post:
      operationId: createGame
      summary: "Create game"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/GameData"
        required: true
      responses:
        "201":
          description: "Created"
          content:
            'application/json':
              schema:
                type: "integer"
                format: "int32"
        "409":
          description: "Game already exists with this name"
  /games/{id}:
    get:
      operationId: getGame
      summary: "Get game"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Game"
        "400":
          description: "Not Found"
    patch:
      operationId: updateGame
      summary: "Update game data"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/GameData"
        required: true
      responses:
        "200":
          description: "OK"
        "400":
          description: "Game not found"
        "409":
          description: "Different game exists with this steamid"
    delete:
      operationId: deleteGame
      summary: "Delete game"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "OK"
  /library:
    get:
      operationId: getGroupLibraryEntries
      summary: "Get the a group of users's library entries"
      description: "Will return an array of entries in compact form, i.e in an array of arrays, with each of the inner arrays holding the values for the different columns of the LibraryEntry object, respectively to the columns property. Default values for entries is also given, and entries equal to those are omitted from the main data."
      parameters:
        - name: "users"
          description: "comma-separated list of user IDs"
          in: "query"
          required: true
          schema:
            type: "string"
        - name: "games"
          description: "comma-separated list of game IDs. If left out, will return all games owned by those users"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/GroupEntries"
              examples:
                Example#1:
                  description: "Library entries of users 1 and 3 for games 2 and 4"
                  value:
                    defaults:
                      user_id: -1
                      game_id: -1
                      interest: false
                    columns:
                      - "user_id"
                      - "game_id"
                      - "interest"
                    entries:
                      - [ 1, 2, true ]
                      - [ 1, 4, true ]
                      - [ 2, 4, true ]
        "400":
          description: "Couldn't part user and/or game IDs"
  /library/{userid}/{gameid}:
    get:
      operationId: getLibraryEntry
      summary: "Gets the library entry for a given user and game"
      parameters:
        - name: "userid"
          description: "Id of the user"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "gid"
          description: "Id of the game"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/LibraryEntry"
    post:
      operationId: setLibraryEntry
      summary: "Sets the library entry data for a given user and game"
      description: "Requires to be logged in as the given user, or to have admin access"
      parameters:
        - name: "userid"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "gameid"
          in: "path"
          required: true
          schema:
            type: "integer"
      requestBody:
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/LibraryEntry"
        required: true
      responses:
        "401":
          description: "Unauthorized"
        "200":
          description: "OK"
    delete:
      operationId: resetLibraryEntry
      summary: "Resets a library entry for a given user and game"
      parameters:
        - name: "uid"
          in: "path"
          required: true
          schema:
            type: "integer"
        - name: "gid"
          in: "path"
          required: true
          schema:
            type: "integer"
      responses:
        "401":
          description: "Unauthorized"
        "200":
          description: "OK. Returns the default values for reference"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/LibraryEntry"
components:
  schemas:
    AuthStatus:
      description: "An optional User object to indicate authentication status"
      type: "object"
      properties:
        user:
          $ref: "#/components/schemas/User"
    PasswordFormData:
      type: "object"
      properties:
        password:
          type: "string"
    UserData:
      description: "Data about a user, without their ID"
      type: "object"
      properties:
        name:
          type: "string"
          required: true
    User:
      description: "Data about a user"
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
          required: true
        name:
          type: "string"
          required: true
    Game:
      description: "Data about a game"
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
          required: true
        name:
          type: "string"
          required: true
        steamid:
          type: "string"
          required: false
    GameData:
      description: "Data about a game, without its ID"
      type: "object"
      properties:
        name:
          type: "string"
          required: true
        steamid:
          type: "string"
          required: false
    LibraryEntry:
      description: "Relation between a user and a game in the app"
      type: "object"
      properties:
        user_id:
          type: "integer"
          format: "int32"
        game_id:
          type: "integer"
          format: "int32"
        interest:
          type: "boolean"
    LibraryEntryData:
      description: "Relation between a user and a game in the app, without the associated IDs"
      type: "object"
      properties:
        interest:
          type: "boolean"
    GroupEntries:
      type: "object"
      properties:
        defaults:
          $ref: "#/components/schemas/LibraryEntry"
        columns:
          type: "array"
          items:
            type: "string"
        entries:
          type: "array"
          items:
            $ref: "#/components/schemas/LibraryEntry"
    Message:
      description: "A message encapsulated in a JSON object"
      type: "object"
      properties:
        msg:
          type: "string"